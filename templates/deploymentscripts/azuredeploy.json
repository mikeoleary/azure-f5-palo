{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "dnsLabel": {
            "type": "string",
            "metadata": {
                "description": "DNS Label for deployment"
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "storageAccountName"
            }
        },
        "storageAccountKey": {
            "type": "string",
            "metadata": {
                "description": "storageAccountKey"
            }
        },
        "userAssignedManagedIdentityId": {
            "type": "string",
            "metadata": {
                "description": "Id of User Assigned Managed Identity with Contributor permissions on RG"
            }
        },
        "userAssignedManagedIdentityName": {
            "type": "string",
            "metadata": {
                "description": "Name of User Assigned Managed Identity with Contributor permissions on RG"
            }
        },
        "appServerPublicIP": {
            "type": "string",
            "metadata": {
                "description": "Public IP address of app server deployment"
            }
        }
    },
    "variables":{
        "containerGroupName": "[concat(parameters('dnsLabel'), '-containerGroup')]"
        },
    "resources": [
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[guid(resourceGroup().id)]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('userAssignedManagedIdentityId')]"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "name": "runPowerShellInline",
            "dependsOn": [
                "[guid(resourceGroup().id)]"
            ],
            "location": "[resourceGroup().location]",
            "kind": "AzurePowerShell", // or "AzureCLI"
            "identity": {
                "type": "userAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedManagedIdentityName'))]": {}
                }
            },
            "properties": {
                "forceUpdateTag": 1,
                "containerSettings": {
                    "containerGroupName": "[variables('containerGroupName')]"
                },
                "storageAccountSettings": {
                    "storageAccountName": "[parameters('storageAccountName')]",
                    "storageAccountKey": "[parameters('storageAccountKey')]"
                },
                "azPowerShellVersion": "3.0",  // or "azCliVersion": "2.0.80"
                "arguments": "[concat('-url http://', parameters('appServerPublicIP'))]",
                "scriptContent": "
                param(
                    [string] $url
                    )
                #every 30 secs for 10 mins, check if app server is up yet
                $i=0
                write-output 'setting i to 0'
                while ($i -lt 20) {
                    try {
                        write-output 'attempt number $i'
                        $response = Invoke-WebRequest -URI $url -UseBasicParsing
                        $StatusCode = $response.StatusCode 
                    }
                    catch {
                        $StatusCode = $_.Exception.Response.StatusCode.value__
                    }
                    if ($StatusCode -eq '200') {
                        break;
                    }
                    else {
                        $i++
                        Start-Sleep 15
                    }
                }
                if (!($StatusCode -eq '200')) {
                    throw $url+' is not available, status code is '+ $StatusCode
                    }
                $output = $StatusCode
                Write-Output $output
                $DeploymentScriptOutputs = @{}
                $DeploymentScriptOutputs['text'] = $output
                ", // or "primaryScriptUri": "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.ps1",
                "supportingScriptUris":[],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        }
    ]
}